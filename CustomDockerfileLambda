#docker build -f CustomDockerfileLambda -t test . --progress=plain --build-arg with_models=true --build-arg models=en,ar --build-arg with_rie=true && docker run --rm -p 9000:8080 test
#curl "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{"q": "Hello","source": "en","target": "ar","format": "text","api_key": "Q5OayeSDEmxdxE4WVTqmVaAI2va3FVNT69bZM-Vgk-8tD20"}

FROM public.ecr.aws/lambda/provided:al2023.2024.09.13.17 as builder

WORKDIR /app

ARG DEBIAN_FRONTEND=noninteractive
RUN dnf update -y \
  && dnf install -y pkg-config gcc g++ nano procps net-tools

RUN dnf install -y python3-devel

RUN python3 -mvenv venv && ./venv/bin/pip install --no-cache-dir --upgrade pip

COPY db db/
COPY scripts scripts/
COPY *.txt .
COPY libretranslate libretranslate/
COPY *.py .
COPY *.toml .
COPY *.cfg .
COPY LICENSE .
COPY VERSION .
COPY *.sh .
COPY *.bat .
COPY *.md .

ENV TZ=UTC

# Install package from source code, compile translations
RUN ./venv/bin/pip install Babel==2.12.1 && ./venv/bin/python scripts/compile_locales.py \
  && ./venv/bin/pip install torch --extra-index-url https://download.pytorch.org/whl/cpu \
  && ./venv/bin/pip install . \
  && ./venv/bin/pip cache purge

#COPY . .


FROM public.ecr.aws/lambda/python:3.9

ARG with_models=false
ARG models=""

COPY --from=builder /app ${LAMBDA_TASK_ROOT}

RUN pip install --no-cache-dir --upgrade pip

COPY --from=builder /app/venv/lib/python3.9/site-packages /var/lang/lib/python3.9/site-packages-build

RUN cp -nr /var/lang/lib/python3.9/site-packages-build/* /var/lang/lib/python3.9/site-packages/ && rm -rf /var/lang/lib/python3.9/site-packages-build

RUN yum update -y \
  && yum install -y nano procps net-tools
RUN sed -i -e 's#self._path = cache_dir#self._path = "/tmp"#g' /var/lang/lib/python3.9/site-packages/cachelib/file.py
RUN sed -i -e 's/os.makedirs(/#os.makedirs(/g' /var/lang/lib/python3.9/site-packages/argostranslate/settings.py

RUN mkdir -p /root/.local/share/argos-translate/packages /root/.local/cache/argos-translate/downloads/
RUN if [ "$with_models" = "true" ]; then  \
  # initialize the language models
  if [ ! -z "$models" ]; then \
  python3 scripts/install_models.py --load_only_lang_codes "$models";   \
  else \
  python3 scripts/install_models.py;  \
  fi \
  fi

EXPOSE 8080

ARG with_rie=false
RUN if [ "$with_rie" = "true" ]; then  \
  (mkdir -p ~/.aws-lambda-rie && curl -Lo ~/.aws-lambda-rie/aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie && chmod +x ~/.aws-lambda-rie/aws-lambda-rie)   \
  fi


ADD lambda lambda
ADD lambda/lambda_function.py lambda_function.py
#RUN chmod +x lambda/entry_script.sh

RUN python3 ${LAMBDA_TASK_ROOT}/lambda_function.py

CMD [ "lambda_function.handler" ]